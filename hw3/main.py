import numpy as np
from math import factorial as f


def combinations(n, k):
    return f(n) / (f(k) * f(n - k))


def bernuli(n, k, p):
    return combinations(n, k) * p ** k * (1 - p) ** (n - k)


""" 1.
Даны значения зарплат из выборки выпускников:
100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150. 
Посчитать (желательно без использования статистических методов наподобие std, var, mean)
среднее арифметическое, среднее квадратичное отклонение, 
смещенную и несмещенную оценки дисперсий для данной выборки.
"""
a = np.array([100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150])

sum = 0  # найдём среднее арифметическое выборки
for i in a:
    sum += i
m = sum / len(a)

sum_x = 0  # найдём сумму всех квадратов отклонений от среднего значения
for i in a:
    sum_x += (i - m) ** 2

s_dispersion = sum_x / len(a)  # смещённая оценка дисперсии
ns_dispersion = sum_x / (len(a) - 1)  # несмещённая оценка дисперсии
std = np.sqrt(s_dispersion)

print('1.\nсреднее арифметическое выборки:', m)
print('среднее квадратичное отклонение:', std)
print('смещенная оценка дисперсии:', s_dispersion)
print('несмещенная оценка дисперсии:', ns_dispersion)

""" 2.
В первом ящике находится 8 мячей, из которых 5 - белые. 
Во втором ящике - 12 мячей, из которых 5 белых. 
Из первого ящика вытаскивают случайным образом два мяча, из второго - 4. 
Какова вероятность того, что 3 мяча белые?
"""
# Из первого ящика достают 2 белых мяча, а из второго - 1 белый мяч.
p_bag1_v1 = combinations(5, 2) / combinations(8, 2)
p_bag2_v1 = combinations(5, 1) / combinations(12, 1)
p1 = p_bag1_v1 * p_bag2_v1
# Из первого ящика достают 1 белый мяч, а из второго - 2 белых мяча.
p_bag1_v2 = combinations(5, 1) / combinations(8, 1)
p_bag2_v2 = combinations(5, 2) / combinations(12, 2)
p2 = p_bag1_v2 * p_bag2_v2
# общая вероятность
p = p1 + p2
print('\n2.\nвероятность того, что 3 мяча белые:', p)

""" 3.
На соревновании по биатлону один из трех спортсменов стреляет и попадает в мишень. 
Вероятность попадания для первого спортсмена равна 0.9, для второго — 0.8, для третьего — 0.6. 
Найти вероятность того, что выстрел произведен: 
a). первым спортсменом 
б). вторым спортсменом 
в). третьим спортсменом.
"""
# используем формулу Байеса
p_b = 1 / 3
biathlete_1 = 0.9
biathlete_2 = 0.8
biathlete_3 = 0.6
p_a = (biathlete_1 * p_b) + (biathlete_2 * p_b) + (biathlete_3 * p_b) #полная вероятность
p1_ba = (biathlete_1 * p_b) / p_a
p2_ba = (biathlete_2 * p_b) / p_a
p3_ba = (biathlete_3 * p_b) / p_a
print('\n3.\nвероятность того, что выстрел произведен:')
print('первым спортсменом', p1_ba)
print('вторым спортсменом', p2_ba)
print('третьим спортсменом', p3_ba)

""" 4.
В университет на факультеты A и B поступило равное количество студентов, 
а на факультет C студентов поступило столько же, сколько на A и B вместе. 
Вероятность того, что студент факультета A сдаст первую сессию, равна 0.8. 
Для студента факультета B эта вероятность равна 0.7, а для студента факультета C - 0.9. 
Студент сдал первую сессию. Какова вероятность, что он учится: 
a). на факультете A 
б). на факультете B 
в). на факультете C?
"""
# используем формулу Байеса
p_b = 1 / 3
student_a = 0.8
student_b = 0.7
student_c = 0.9
p_a = (student_a * p_b) + (student_b * p_b) + (student_c * p_b)
p1_ba = (student_a * p_b) / p_a
p2_ba = (student_b * p_b) / p_a
p3_ba = (student_c * p_b) / p_a
print('\n4.\nвероятность, что студент учится:')
print('на факультете A', p1_ba)
print('на факультете B', p2_ba)
print('на факультете C', p3_ba)

""" 5.
Устройство состоит из трех деталей. Для первой детали вероятность выйти из строя в первый месяц равна 0.1,
для второй - 0.2, для третьей - 0.25. Какова вероятность того, что в первый месяц выйдут из строя:
а). все детали
б). только две детали
в). хотя бы одна деталь
г). от одной до двух деталей?
"""
p_b = 1 / 3
d_1 = 0.1
d_2 = 0.2
d_3 = 0.25

#а). все детали
p_all = d_1 * d_2 * d_3

#б). только две детали
d1_d2 = d_1 * d_2
d1_d3 = d_1 * d_3
d2_d3 = d_2 * d_3
p_two = d1_d2 + d1_d3 + d2_d3

#в). хотя бы одна деталь
# вычислим противоположное событие, что ни одна из деталей не выйдет из строя
p_invert = (1 - d_1) * (1 - d_2) * (1 - d_3)
p_one = 1 - p_invert

#г). от одной до двух деталей
#вероятность, что только одна деталь выйдет из строя
p_1 = (d_1 * (1 - d_2) * (1 - d_3)) + ((1 - d_1) * d_2 * (1 - d_3)) + ((1 - d_1) * (1 - d_2) * d_3)
#вероятность, что только две детали выйдут из строя
p_2 = (d_1 * d_2 * (1 - d_3)) + (d_1 * (1 - d_2) * d_3) + ((1 - d_1) * d_2 * d_3)
p_one_or_two = p_1 + p_2

print('\n5.\nвероятность того, что в первый месяц выйдут из строя:')
print('все детали', p_all)
print('только две детали', p_two)
print('хотя бы одна деталь', p_one)
print('от одной до двух деталей', p_one_or_two)
